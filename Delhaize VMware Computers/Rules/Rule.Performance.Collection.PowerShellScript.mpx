<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--
%%
Description:
  A RULE that uses a PowerShell script to collect data and output/map it to Performance data for collection
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED 
  UniqueID - Is a unique short description of the workflow purpose (NO SPACES OR SPECIAL CHARACTERS ALLOWED) such as "CountFilesInFolder"  
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem
  ObjectName, CounterName, and InstanceName - you can make up in this case, as we are mapping the data from PowerShell to a made up Performance Counter

Version: 1.2
LastModified: 4-Nov-2017
%%

In this fragment you need to replace:
  Delhaize
  VMware
  Tools.Version  
  Delhaize.VMware.Class
  Software
  VMware.Tools
  Version

This fragment depends on references:
  RequiredReference: Alias="SC", ID="Microsoft.SystemCenter.Library"
  RequiredReference: Alias="System", ID="System.Library"	
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Perf", ID="System.Performance.Library"
  RequiredReference: Alias="MSDL", ID="Microsoft.SystemCenter.DataWarehouse.Library"

@@Author=Kevin Holman@@  
--> 
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Delhaize.VMware.Tools.Version.Script.Perf.Datasource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
		  <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
					<SyncTime>$Config/SyncTime$</SyncTime>					
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Delhaize.VMware.Tools.Version.Script.Perf.Datasource.ps1</ScriptName>
                <ScriptBody>
                  #=================================================================================
                  #  Gets the VMWare Tools version
                  #
                  #  Author:
                  #  v1.0
                  #=================================================================================


                  # Constants section - modify stuff here:
                  #=================================================================================
                  # Assign script name variable for use in event logging.
                  $ScriptName = "Delhaize.VMware.Tools.Version.Script.Perf.Datasource.ps1"
                  $EventID = "24082"
                  #=================================================================================


                  # Starting Script section - All scripts get this
                  #=================================================================================
                  # Gather the start time of the script
                  $StartTime = Get-Date
                  #Set variable to be used in logging events
                  $whoami = whoami
                  # Load MOMScript API
                  $momapi = New-Object -comObject MOM.ScriptAPI
                  # Load PropertyBag function
                  $bag = $momapi.CreatePropertyBag()
                  #Log script event that we are starting task
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
                  #=================================================================================


                  # Begin MAIN script section
                  #=================================================================================
                  #Setting a Value to version of VMWare Tools

                  $Value = get-item -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall | gci  -rec -ea SilentlyContinue | foreach {  Get-ItemProperty –Path $_.PsPath } | Where {$_.DisplayName -match "VMware Tools" } | select DisplayVersion -ExpandProperty DisplayVersion

                  #Adding the value from the script into the propertybag
                  $bag.AddValue("Value",$Value)

                  # Return all bags
                  $bag
                  #=================================================================================
                  # End MAIN script section


                  # End of script section
                  #=================================================================================
                  #Log an event for script ending and total execution time.
                  $EndTime = Get-Date
                  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                  #=================================================================================
                  # End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="Delhaize.VMware.Tools.Version.Script.Perf.Rule" Enabled="true" Target="Delhaize.VMware.Class" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Delhaize.VMware.Tools.Version.Script.Perf.Datasource">
            <IntervalSeconds>86400</IntervalSeconds>
			<SyncTime></SyncTime>
		    <TimeoutSeconds>120</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="System.Performance.DataGenericMapper" TypeID="Perf!System.Performance.DataGenericMapper">
          <ObjectName>Software</ObjectName>
          <CounterName>Version</CounterName>
          <InstanceName>VMware.Tools</InstanceName>
          <Value>$Data/Property[@Name='Value']$</Value>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />  <!-- Can be optional - collect this data to the Operations Database.  -->
          <WriteAction ID="WriteToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />  <!-- Can be optional - collect this data to the Data Warehouse Database -->
        </WriteActions>
      </Rule>
    </Rules>
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Delhaize.VMware.Tools.Version.Script.Perf.Rule">
          <Name>Delhaize VMware Tools.Version Script Performance Collection Rule</Name>
          <Description></Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>  
</ManagementPackFragment>
