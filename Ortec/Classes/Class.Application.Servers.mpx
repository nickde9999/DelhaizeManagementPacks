<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<!--
%%
Description:
  A CLASS and DISCOVERY using a PowerShell Script to create class instances
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED  
  In this example we added a a couple additional class properties to demo that capability 
Version: 1.3
LastModified: 10-Nov-2017
%%

In this fragment you need to replace:
  Delhaize
  ORTEC.Application.Servers

This fragment depends on references:
  RequiredReference: Alias="System", ID="System.Library"
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"

@@Author=Kevin Holman@@  
--> 
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
        <ClassType ID="Delhaize.ORTEC.Application.Servers.Class" Base="Windows!Microsoft.Windows.LocalApplication" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="LogFileDirectory" Type="string"/>
          
		<!-- We choose Microsoft.Windows.LocalApplication as our generic base class -->
				
        </ClassType>	
      </ClassTypes>
    </EntityTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Delhaize.ORTEC.Application.Servers.Class.Discovery" Target="Windows!Microsoft.Windows.Server.OperatingSystem" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
      <!-- We choose Microsoft.Windows.Server.OperatingSystem as the preferred target class to ensure this will run on all Windows Servers, but will not create duplicates on clusters -->
        <Category>Discovery</Category>
        <DiscoveryTypes>
	      <DiscoveryClass TypeID="Delhaize.ORTEC.Application.Servers.Class">
            <Property PropertyID="LogFileDirectory"/>
            </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>86400</IntervalSeconds>
          <SyncTime />
          <ScriptName>Delhaize.ORTEC.Application.Servers.Class.Discovery.ps1</ScriptName>
          <ScriptBody>
            #=================================================================================
            #  Populates Class instances based on an Array. Array is hardcoded.
            #
            #  Author: Nick Dewitte
            #  v1.0
            #=================================================================================
            param($SourceId,$ManagedEntityId,$ComputerName)

            # Constants section - modify stuff here:
            #=================================================================================
            # Assign script name variable for use in event logging.
            # ScriptName should be the same as the ID of the module that the script is contained in
            $ScriptName = "Delhaize.ORTEC.Application.Servers.Class.Discovery.ps1"
            $EventID = "20001"
            #
            # Array of servers
            $ApplicationServers= @("EU902781-BUC","LT90-BE-15611")
            #
            #=================================================================================


            # Starting Script section - All scripts get this
            #=================================================================================
            # Gather the start time of the script
            $StartTime = Get-Date
            #Set variable to be used in logging events
            $whoami = whoami
            # Load MOMScript API
            $momapi = New-Object -comObject MOM.ScriptAPI
            #Log script event that we are starting task
            $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
            #=================================================================================


            # Discovery Script section - Discovery scripts get this
            #=================================================================================
            # Load SCOM Discovery module
            $DiscoveryData = $momapi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
            #=================================================================================


            # Begin MAIN script section
            #=================================================================================
            # Test to see if computername is part of the $ApplicationServers Array
            $Member = $ApplicationServers -contains $env:computername

            #Set variables for discovered instances
            $OrtecRegistry = get-itemproperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ORTEC\COMTEC
            $LogFileDirectory = $OrtecRegistry.LogFileDirectory.ToString()
            

            # If server exists in array create instance of class
            If ($Member -eq $true)
            {
            $instance = $DiscoveryData.CreateClassInstance("$MPElement[Name='Delhaize.ORTEC.Application.Servers.Class']$")
            $instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
            $instance.AddProperty("$MPElement[Name='Delhaize.ORTEC.Application.Servers.Class']/LogFileDirectory$", $LogFileDirectory)
            $instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
            $DiscoveryData.AddInstance($instance)
            }
            Else
            {
            # Log an event for no objects discovered
            $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Discovery script returned no discovered objects")
            }

            # Return Discovery Items Normally
            $DiscoveryData
            # Return Discovery Bag to the command line for testing (does not work from ISE)
            # $momapi.Return($DiscoveryData)
            #=================================================================================
            # End MAIN script section


            # End of script section
            #=================================================================================
            #Log an event for script ending and total execution time.
            $EndTime = Get-Date
            $ScriptTime = ($EndTime - $StartTime).TotalSeconds
            $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
            #=================================================================================
            # End of script
          </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>SourceID</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>ManagedEntityID</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>ComputerName</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
    </Discoveries>
  </Monitoring>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <!-- Classes -->	  
        <DisplayString ElementID="Delhaize.ORTEC.Application.Servers.Class">
          <Name>Delhaize ORTEC Application Server Class</Name>
        </DisplayString>
        <DisplayString ElementID="Delhaize.ORTEC.Application.Servers.Class" SubElementID="LogFileDirectory">
          <Name>LogFileDirectory</Name>
        </DisplayString>
        
        <!-- Discoveries -->		
        <DisplayString ElementID="Delhaize.ORTEC.Application.Servers.Class.Discovery">
          <Name>Delhaize ORTEC Application Server Class Discovery</Name>
        </DisplayString>		
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
  